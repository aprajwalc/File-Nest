// Generated by CoffeeScript 1.12.7

/*
CoffeeLint

Copyright (c) 2011 Matthew Perpick.
CoffeeLint is freely distributable under the MIT license.
 */

(function() {
  var ASTLinter, CoffeeScript, ERROR, IGNORE, LexicalLinter, LineLinter, RULES, WARN, block_config, coffeelint, createError, defaults, extend, mergeDefaultConfig, regexes,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  coffeelint = {};

  if (typeof exports !== "undefined" && exports !== null) {
    coffeelint = exports;
    CoffeeScript = require('coffee-script');
  } else {
    this.coffeelint = coffeelint;
    CoffeeScript = this.CoffeeScript;
  }

  coffeelint.VERSION = "0.5.7";

  ERROR = 'error';

  WARN = 'warn';

  IGNORE = 'ignore';

  coffeelint.RULES = RULES = {
    no_tabs: {
      level: ERROR,
      message: 'Line contains tab indentation',
      description: "This rule forbids tabs in indentation. Enough said. It is enabled by\ndefault."
    },
    no_trailing_whitespace: {
      level: ERROR,
      message: 'Line ends with trailing whitespace',
      allowed_in_comments: false,
      description: "This rule forbids trailing whitespace in your code, since it is\nneedless cruft. It is enabled by default."
    },
    max_line_length: {
      value: 80,
      level: ERROR,
      message: 'Line exceeds maximum allowed length',
      description: "This rule imposes a maximum line length on your code. <a\nhref=\"http://www.python.org/dev/peps/pep-0008/\">Python's style\nguide</a> does a good job explaining why you might want to limit the\nlength of your lines, though this is a matter of taste.\n\nLines can be no longer than eighty characters by default."
    },
    camel_case_classes: {
      level: ERROR,
      message: 'Class names should be camel cased',
      description: "This rule mandates that all class names are camel cased. Camel\ncasing class names is a generally accepted way of distinguishing\nconstructor functions - which require the 'new' prefix to behave\nproperly - from plain old functions.\n<pre>\n<code># Good!\nclass BoaConstrictor\n\n# Bad!\nclass boaConstrictor\n</code>\n</pre>\nThis rule is enabled by default."
    },
    indentation: {
      value: 2,
      level: ERROR,
      message: 'Line contains inconsistent indentation',
      description: "This rule imposes a standard number of spaces to be used for\nindentation. Since whitespace is significant in CoffeeScript, it's\ncritical that a project chooses a standard indentation format and\nstays consistent. Other roads lead to darkness. <pre> <code>#\nEnabling this option will prevent this ugly\n# but otherwise valid CoffeeScript.\ntwoSpaces = () ->\n  fourSpaces = () ->\n      eightSpaces = () ->\n            'this is valid CoffeeScript'\n\n</code>\n</pre>\nTwo space indentation is enabled by default."
    },
    no_implicit_braces: {
      level: IGNORE,
      message: 'Implicit braces are forbidden',
      description: "This rule prohibits implicit braces when declaring object literals.\nImplicit braces can make code more difficult to understand,\nespecially when used in combination with optional parenthesis.\n<pre>\n<code># Do you find this code ambiguous? Is it a\n# function call with three arguments or four?\nmyFunction a, b, 1:2, 3:4\n\n# While the same code written in a more\n# explicit manner has no ambiguity.\nmyFunction(a, b, {1:2, 3:4})\n</code>\n</pre>\nImplicit braces are permitted by default, since their use is\nidiomatic CoffeeScript."
    },
    no_trailing_semicolons: {
      level: ERROR,
      message: 'Line contains a trailing semicolon',
      description: "This rule prohibits trailing semicolons, since they are needless\ncruft in CoffeeScript.\n<pre>\n<code># This semicolon is meaningful.\nx = '1234'; console.log(x)\n\n# This semicolon is redundant.\nalert('end of line');\n</code>\n</pre>\nTrailing semicolons are forbidden by default."
    },
    no_plusplus: {
      level: IGNORE,
      message: 'The increment and decrement operators are forbidden',
      description: "This rule forbids the increment and decrement arithmetic operators.\nSome people believe the <tt>++</tt> and <tt>--</tt> to be cryptic\nand the cause of bugs due to misunderstandings of their precedence\nrules.\nThis rule is disabled by default."
    },
    no_throwing_strings: {
      level: ERROR,
      message: 'Throwing strings is forbidden',
      description: "This rule forbids throwing string literals or interpolations. While\nJavaScript (and CoffeeScript by extension) allow any expression to\nbe thrown, it is best to only throw <a\nhref=\"https://developer.mozilla.org\n/en/JavaScript/Reference/Global_Objects/Error\"> Error</a> objects,\nbecause they contain valuable debugging information like the stack\ntrace. Because of JavaScript's dynamic nature, CoffeeLint cannot\nensure you are always throwing instances of <tt>Error</tt>. It will\nonly catch the simple but real case of throwing literal strings.\n<pre>\n<code># CoffeeLint will catch this:\nthrow \"i made a boo boo\"\n\n# ... but not this:\nthrow getSomeString()\n</code>\n</pre>\nThis rule is enabled by default."
    },
    cyclomatic_complexity: {
      value: 10,
      level: IGNORE,
      message: 'The cyclomatic complexity is too damn high'
    },
    no_backticks: {
      level: ERROR,
      message: 'Backticks are forbidden',
      description: "Backticks allow snippets of JavaScript to be embedded in\nCoffeeScript. While some folks consider backticks useful in a few\nniche circumstances, they should be avoided because so none of\nJavaScript's \"bad parts\", like <tt>with</tt> and <tt>eval</tt>,\nsneak into CoffeeScript.\nThis rule is enabled by default."
    },
    line_endings: {
      level: IGNORE,
      value: 'unix',
      message: 'Line contains incorrect line endings',
      description: "This rule ensures your project uses only <tt>windows</tt> or\n<tt>unix</tt> line endings. This rule is disabled by default."
    },
    no_implicit_parens: {
      level: IGNORE,
      message: 'Implicit parens are forbidden',
      description: "This rule prohibits implicit parens on function calls.\n<pre>\n<code># Some folks don't like this style of coding.\nmyFunction a, b, c\n\n# And would rather it always be written like this:\nmyFunction(a, b, c)\n</code>\n</pre>\nImplicit parens are permitted by default, since their use is\nidiomatic CoffeeScript."
    },
    empty_constructor_needs_parens: {
      level: IGNORE,
      message: 'Invoking a constructor without parens and without arguments'
    },
    non_empty_constructor_needs_parens: {
      level: IGNORE,
      message: 'Invoking a constructor without parens and with arguments'
    },
    no_empty_param_list: {
      level: IGNORE,
      message: 'Empty parameter list is forbidden',
      description: "This rule prohibits empty parameter lists in function definitions.\n<pre>\n<code># The empty parameter list in here is unnecessary:\nmyFunction = () -&gt;\n\n# We might favor this instead:\nmyFunction = -&gt;\n</code>\n</pre>\nEmpty parameter lists are permitted by default."
    },
    space_operators: {
      level: IGNORE,
      message: 'Operators must be spaced properly'
    },
    duplicate_key: {
      level: ERROR,
      message: 'Duplicate key defined in object or class'
    },
    newlines_after_classes: {
      value: 3,
      level: IGNORE,
      message: 'Wrong count of newlines between a class and other code'
    },
    no_stand_alone_at: {
      level: IGNORE,
      message: '@ must not be used stand alone',
      description: "This rule checks that no stand alone @ are in use, they are\ndiscouraged. Further information in CoffeScript issue <a\nhref=\"https://github.com/jashkenas/coffee-script/issues/1601\">\n#1601</a>"
    },
    arrow_spacing: {
      level: IGNORE,
      message: 'Function arrow (->) must be spaced properly',
      description: "<p>This rule checks to see that there is spacing before and after\nthe arrow operator that declares a function. This rule is disabled\nby default.</p> <p>Note that if arrow_spacing is enabled, and you\npass an empty function as a parameter, arrow_spacing will accept\neither a space or no space in-between the arrow operator and the\nparenthesis</p>\n<pre><code># Both of this will not trigger an error,\n# even with arrow_spacing enabled.\nx(-> 3)\nx( -> 3)\n\n# However, this will trigger an error\nx((a,b)-> 3)\n</code>\n</pre>"
    },
    coffeescript_error: {
      level: ERROR,
      message: ''
    }
  };

  regexes = {
    trailingWhitespace: /[^\s]+[\t ]+\r?$/,
    lineHasComment: /^\s*[^\#]*\#/,
    indentation: /\S/,
    longUrlComment: /^\s*\#\s*http[^\s]+$/,
    camelCase: /^[A-Z][a-zA-Z\d]*$/,
    trailingSemicolon: /;\r?$/,
    configStatement: /coffeelint:\s*(disable|enable)(?:=([\w\s,]*))?/
  };

  extend = function() {
    var destination, k, len, m, source, sources, v;
    destination = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    for (m = 0, len = sources.length; m < len; m++) {
      source = sources[m];
      for (k in source) {
        v = source[k];
        destination[k] = v;
      }
    }
    return destination;
  };

  defaults = function(source, defaults) {
    return extend({}, defaults, source);
  };

  createError = function(rule, attrs) {
    var level;
    if (attrs == null) {
      attrs = {};
    }
    level = attrs.level;
    if (level !== IGNORE && level !== WARN && level !== ERROR) {
      throw new Error("unknown level " + level);
    }
    if (level === ERROR || level === WARN) {
      attrs.rule = rule;
      return defaults(attrs, RULES[rule]);
    } else {
      return null;
    }
  };

  block_config = {
    enable: {},
    disable: {}
  };

  LineLinter = (function() {
    function LineLinter(source, config, tokensByLine) {
      this.source = source;
      this.config = config;
      this.line = null;
      this.lineNumber = 0;
      this.tokensByLine = tokensByLine;
      this.lines = this.source.split('\n');
      this.lineCount = this.lines.length;
      this.context = {
        "class": {
          inClass: false,
          lastUnemptyLineInClass: null,
          classIndents: null
        }
      };
    }

    LineLinter.prototype.lint = function() {
      var error, errors, len, line, lineNumber, m, ref;
      errors = [];
      ref = this.lines;
      for (lineNumber = m = 0, len = ref.length; m < len; lineNumber = ++m) {
        line = ref[lineNumber];
        this.lineNumber = lineNumber;
        this.line = line;
        this.maintainClassContext();
        error = this.lintLine();
        if (error) {
          errors.push(error);
        }
      }
      return errors;
    };

    LineLinter.prototype.lintLine = function() {
      return this.checkTabs() || this.checkTrailingWhitespace() || this.checkLineLength() || this.checkTrailingSemicolon() || this.checkLineEndings() || this.checkComments() || this.checkNewlinesAfterClasses();
    };

    LineLinter.prototype.checkTabs = function() {
      var indentation;
      indentation = this.line.split(regexes.indentation)[0];
      if (this.lineHasToken() && indexOf.call(indentation, '\t') >= 0) {
        return this.createLineError('no_tabs');
      } else {
        return null;
      }
    };

    LineLinter.prototype.checkTrailingWhitespace = function() {
      var len, line, m, ref, ref1, str, token, tokens;
      if (regexes.trailingWhitespace.test(this.line)) {
        if (!((ref = this.config['no_trailing_whitespace']) != null ? ref.allowed_in_comments : void 0)) {
          return this.createLineError('no_trailing_whitespace');
        }
        line = this.line;
        tokens = this.tokensByLine[this.lineNumber];
        if (!tokens) {
          return null;
        }
        ref1 = (function() {
          var len, o, results;
          results = [];
          for (o = 0, len = tokens.length; o < len; o++) {
            token = tokens[o];
            if (token[0] === 'STRING') {
              results.push(token[1]);
            }
          }
          return results;
        })();
        for (m = 0, len = ref1.length; m < len; m++) {
          str = ref1[m];
          line = line.replace(str, 'STRING');
        }
        if (!regexes.lineHasComment.test(line)) {
          return this.createLineError('no_trailing_whitespace');
        } else {
          return null;
        }
      } else {
        return null;
      }
    };

    LineLinter.prototype.checkLineLength = function() {
      var attrs, max, ref, rule;
      rule = 'max_line_length';
      max = (ref = this.config[rule]) != null ? ref.value : void 0;
      if (max && max < this.line.length && !regexes.longUrlComment.test(this.line)) {
        attrs = {
          context: "Length is " + this.line.length + ", max is " + max
        };
        return this.createLineError(rule, attrs);
      } else {
        return null;
      }
    };

    LineLinter.prototype.checkTrailingSemicolon = function() {
      var first, hasNewLine, hasSemicolon, last, m, ref;
      hasSemicolon = regexes.trailingSemicolon.test(this.line);
      ref = this.getLineTokens(), first = 2 <= ref.length ? slice.call(ref, 0, m = ref.length - 1) : (m = 0, []), last = ref[m++];
      hasNewLine = last && (last.newLine != null);
      if (hasSemicolon && !hasNewLine && this.lineHasToken()) {
        return this.createLineError('no_trailing_semicolons');
      } else {
        return null;
      }
    };

    LineLinter.prototype.checkLineEndings = function() {
      var ending, lastChar, ref, rule, valid;
      rule = 'line_endings';
      ending = (ref = this.config[rule]) != null ? ref.value : void 0;
      if (!ending || this.isLastLine() || !this.line) {
        return null;
      }
      lastChar = this.line[this.line.length - 1];
      valid = (function() {
        if (ending === 'windows') {
          return lastChar === '\r';
        } else if (ending === 'unix') {
          return lastChar !== '\r';
        } else {
          throw new Error("unknown line ending type: " + ending);
        }
      })();
      if (!valid) {
        return this.createLineError(rule, {
          context: "Expected " + ending
        });
      } else {
        return null;
      }
    };

    LineLinter.prototype.checkComments = function() {
      var cmd, len, m, r, ref, result, rules;
      result = regexes.configStatement.exec(this.line);
      if (result != null) {
        cmd = result[1];
        rules = [];
        if (result[2] != null) {
          ref = result[2].split(',');
          for (m = 0, len = ref.length; m < len; m++) {
            r = ref[m];
            rules.push(r.replace(/^\s+|\s+$/g, ""));
          }
        }
        block_config[cmd][this.lineNumber] = rules;
      }
      return null;
    };

    LineLinter.prototype.checkNewlinesAfterClasses = function() {
      var ending, got, rule;
      rule = 'newlines_after_classes';
      ending = this.config[rule].value;
      if (!ending || this.isLastLine()) {
        return null;
      }
      if (!this.context["class"].inClass && (this.context["class"].lastUnemptyLineInClass != null) && ((this.lineNumber - 1) - this.context["class"].lastUnemptyLineInClass) !== ending) {
        got = (this.lineNumber - 1) - this.context["class"].lastUnemptyLineInClass;
        return this.createLineError(rule, {
          context: "Expected " + ending + " got " + got
        });
      }
      return null;
    };

    LineLinter.prototype.createLineError = function(rule, attrs) {
      var ref;
      if (attrs == null) {
        attrs = {};
      }
      attrs.lineNumber = this.lineNumber + 1;
      attrs.level = (ref = this.config[rule]) != null ? ref.level : void 0;
      return createError(rule, attrs);
    };

    LineLinter.prototype.isLastLine = function() {
      return this.lineNumber === this.lineCount - 1;
    };

    LineLinter.prototype.lineHasToken = function(tokenType, lineNumber) {
      var len, m, token, tokens;
      if (tokenType == null) {
        tokenType = null;
      }
      if (lineNumber == null) {
        lineNumber = null;
      }
      lineNumber = lineNumber != null ? lineNumber : this.lineNumber;
      if (tokenType == null) {
        return this.tokensByLine[lineNumber] != null;
      } else {
        tokens = this.tokensByLine[lineNumber];
        if (tokens == null) {
          return null;
        }
        for (m = 0, len = tokens.length; m < len; m++) {
          token = tokens[m];
          if (token[0] === tokenType) {
            return true;
          }
        }
        return false;
      }
    };

    LineLinter.prototype.getLineTokens = function() {
      return this.tokensByLine[this.lineNumber] || [];
    };

    LineLinter.prototype.maintainClassContext = function() {
      if (this.context["class"].inClass) {
        if (this.lineHasToken('INDENT')) {
          this.context["class"].classIndents++;
        } else if (this.lineHasToken('OUTDENT')) {
          this.context["class"].classIndents--;
          if (this.context["class"].classIndents === 0) {
            this.context["class"].inClass = false;
            this.context["class"].classIndents = null;
          }
        }
        if (this.context["class"].inClass && !this.line.match(/^\s*$/)) {
          this.context["class"].lastUnemptyLineInClass = this.lineNumber;
        }
      } else {
        if (!this.line.match(/\\s*/)) {
          this.context["class"].lastUnemptyLineInClass = null;
        }
        if (this.lineHasToken('CLASS')) {
          this.context["class"].inClass = true;
          this.context["class"].lastUnemptyLineInClass = this.lineNumber;
          this.context["class"].classIndents = 0;
        }
      }
      return null;
    };

    return LineLinter;

  })();

  LexicalLinter = (function() {
    function LexicalLinter(source, config) {
      this.source = source;
      this.tokens = CoffeeScript.tokens(source);
      this.config = config;
      this.i = 0;
      this.tokensByLine = {};
      this.arrayTokens = [];
      this.parenTokens = [];
      this.callTokens = [];
      this.lines = source.split('\n');
      this.braceScopes = [];
    }

    LexicalLinter.prototype.lint = function() {
      var error, errors, i, len, m, ref, token;
      errors = [];
      ref = this.tokens;
      for (i = m = 0, len = ref.length; m < len; i = ++m) {
        token = ref[i];
        this.i = i;
        error = this.lintToken(token);
        if (error) {
          errors.push(error);
        }
      }
      return errors;
    };

    LexicalLinter.prototype.lintToken = function(token) {
      var base, lineNumber, type, value;
      type = token[0], value = token[1], lineNumber = token[2];
      if (typeof lineNumber === "object") {
        if (type === 'OUTDENT' || type === 'INDENT') {
          lineNumber = lineNumber.last_line;
        } else {
          lineNumber = lineNumber.first_line;
        }
      }
      if ((base = this.tokensByLine)[lineNumber] == null) {
        base[lineNumber] = [];
      }
      this.tokensByLine[lineNumber].push(token);
      this.lineNumber = lineNumber || this.lineNumber || 0;
      switch (type) {
        case "->":
          return this.lintArrowSpacing(token);
        case "INDENT":
          return this.lintIndentation(token);
        case "CLASS":
          return this.lintClass(token);
        case "UNARY":
          return this.lintUnary(token);
        case "{":
        case "}":
          return this.lintBrace(token);
        case "IDENTIFIER":
          return this.lintIdentifier(token);
        case "++":
        case "--":
          return this.lintIncrement(token);
        case "THROW":
          return this.lintThrow(token);
        case "[":
        case "]":
          return this.lintArray(token);
        case "(":
        case ")":
          return this.lintParens(token);
        case "JS":
          return this.lintJavascript(token);
        case "CALL_START":
        case "CALL_END":
          return this.lintCall(token);
        case "PARAM_START":
          return this.lintParam(token);
        case "@":
          return this.lintStandaloneAt(token);
        case "+":
        case "-":
          return this.lintPlus(token);
        case "=":
        case "MATH":
        case "COMPARE":
        case "LOGIC":
        case "COMPOUND_ASSIGN":
          return this.lintMath(token);
        default:
          return null;
      }
    };

    LexicalLinter.prototype.lintUnary = function(token) {
      var expectedCallStart, expectedIdentifier, identifierIndex;
      if (token[1] === 'new') {
        identifierIndex = 1;
        while (true) {
          expectedIdentifier = this.peek(identifierIndex);
          expectedCallStart = this.peek(identifierIndex + 1);
          if ((expectedIdentifier != null ? expectedIdentifier[0] : void 0) === 'IDENTIFIER') {
            if ((expectedCallStart != null ? expectedCallStart[0] : void 0) === '.') {
              identifierIndex += 2;
              continue;
            }
          }
          break;
        }
        if ((expectedIdentifier != null ? expectedIdentifier[0] : void 0) === 'IDENTIFIER' && (expectedCallStart != null)) {
          if (expectedCallStart[0] === 'CALL_START') {
            if (expectedCallStart.generated) {
              return this.createLexError('non_empty_constructor_needs_parens');
            }
          } else {
            return this.createLexError('empty_constructor_needs_parens');
          }
        }
      }
    };

    LexicalLinter.prototype.lintArray = function(token) {
      if (token[0] === '[') {
        this.arrayTokens.push(token);
      } else if (token[0] === ']') {
        this.arrayTokens.pop();
      }
      return null;
    };

    LexicalLinter.prototype.lintParens = function(token) {
      var i, n1, n2, p1;
      if (token[0] === '(') {
        p1 = this.peek(-1);
        n1 = this.peek(1);
        n2 = this.peek(2);
        i = n1 && n2 && n1[0] === 'STRING' && n2[0] === '+';
        token.isInterpolation = i;
        this.parenTokens.push(token);
      } else {
        this.parenTokens.pop();
      }
      return null;
    };

    LexicalLinter.prototype.isInInterpolation = function() {
      var len, m, ref, t;
      ref = this.parenTokens;
      for (m = 0, len = ref.length; m < len; m++) {
        t = ref[m];
        if (t.isInterpolation) {
          return true;
        }
      }
      return false;
    };

    LexicalLinter.prototype.isInExtendedRegex = function() {
      var len, m, ref, t;
      ref = this.callTokens;
      for (m = 0, len = ref.length; m < len; m++) {
        t = ref[m];
        if (t.isRegex) {
          return true;
        }
      }
      return false;
    };

    LexicalLinter.prototype.lintPlus = function(token) {
      var isUnary, p, ref, unaries;
      if (this.isInInterpolation() || this.isInExtendedRegex()) {
        return null;
      }
      p = this.peek(-1);
      unaries = ['TERMINATOR', '(', '=', '-', '+', ',', 'CALL_START', 'INDEX_START', '..', '...', 'COMPARE', 'IF', 'THROW', 'LOGIC', 'POST_IF', ':', '[', 'INDENT', 'COMPOUND_ASSIGN', 'RETURN', 'MATH'];
      isUnary = !p ? false : (ref = p[0], indexOf.call(unaries, ref) >= 0);
      if ((isUnary && token.spaced) || (!isUnary && !token.spaced && !token.newLine)) {
        return this.createLexError('space_operators', {
          context: token[1]
        });
      } else {
        return null;
      }
    };

    LexicalLinter.prototype.lintMath = function(token) {
      if (!token.spaced && !token.newLine) {
        return this.createLexError('space_operators', {
          context: token[1]
        });
      } else {
        return null;
      }
    };

    LexicalLinter.prototype.lintCall = function(token) {
      var p;
      if (token[0] === 'CALL_START') {
        p = this.peek(-1);
        token.isRegex = p && p[0] === 'IDENTIFIER' && p[1] === 'RegExp';
        this.callTokens.push(token);
        if (token.generated) {
          return this.createLexError('no_implicit_parens');
        } else {
          return null;
        }
      } else {
        this.callTokens.pop();
        return null;
      }
    };

    LexicalLinter.prototype.lintParam = function(token) {
      var nextType;
      nextType = this.peek()[0];
      if (nextType === 'PARAM_END') {
        return this.createLexError('no_empty_param_list');
      } else {
        return null;
      }
    };

    LexicalLinter.prototype.lintIdentifier = function(token) {
      var key, nextToken, previousToken;
      key = token[1];
      if (this.currentScope == null) {
        return null;
      }
      nextToken = this.peek(1);
      if (nextToken[1] !== ':') {
        return null;
      }
      previousToken = this.peek(-1);
      if (previousToken[0] === '@') {
        key = "@" + key;
      }
      key = "identifier-" + key;
      if (this.currentScope[key]) {
        return this.createLexError('duplicate_key');
      } else {
        this.currentScope[key] = token;
        return null;
      }
    };

    LexicalLinter.prototype.lintBrace = function(token) {
      var i, t;
      if (token[0] === '{') {
        if (this.currentScope != null) {
          this.braceScopes.push(this.currentScope);
        }
        this.currentScope = {};
      } else {
        this.currentScope = this.braceScopes.pop();
      }
      if (token.generated && token[0] === '{') {
        i = -1;
        while (true) {
          t = this.peek(i);
          if ((t == null) || t[0] === 'TERMINATOR') {
            return this.createLexError('no_implicit_braces');
          }
          if (t[0] === 'CLASS') {
            return null;
          }
          i -= 1;
        }
      } else {
        return null;
      }
    };

    LexicalLinter.prototype.lintJavascript = function(token) {
      return this.createLexError('no_backticks');
    };

    LexicalLinter.prototype.lintThrow = function(token) {
      var n1, n2, nextIsString, ref;
      ref = [this.peek(), this.peek(2)], n1 = ref[0], n2 = ref[1];
      nextIsString = n1[0] === 'STRING' || (n1[0] === '(' && n2[0] === 'STRING');
      if (nextIsString) {
        return this.createLexError('no_throwing_strings');
      }
    };

    LexicalLinter.prototype.lintIncrement = function(token) {
      var attrs;
      attrs = {
        context: "found '" + token[0] + "'"
      };
      return this.createLexError('no_plusplus', attrs);
    };

    LexicalLinter.prototype.lintStandaloneAt = function(token) {
      var isDot, isIdentifier, isIndexStart, isValidProtoProperty, nextToken, protoProperty, spaced;
      nextToken = this.peek();
      spaced = token.spaced;
      isIdentifier = nextToken[0] === 'IDENTIFIER';
      isIndexStart = nextToken[0] === 'INDEX_START';
      isDot = nextToken[0] === '.';
      if (nextToken[0] === '::') {
        protoProperty = this.peek(2);
        isValidProtoProperty = protoProperty[0] === 'IDENTIFIER';
      }
      if (spaced || (!isIdentifier && !isIndexStart && !isDot && !isValidProtoProperty)) {
        return this.createLexError('no_stand_alone_at');
      }
    };

    LexicalLinter.prototype.lintIndentation = function(token) {
      var context, currentLine, expected, ignoreIndent, isArrayIndent, isInterpIndent, isMultiline, lineNumber, numIndents, prevNum, previous, previousIndentation, previousLine, previousSymbol, ref, type;
      type = token[0], numIndents = token[1], lineNumber = token[2];
      if (token.generated != null) {
        return null;
      }
      previous = this.peek(-2);
      isInterpIndent = previous && previous[0] === '+';
      previous = this.peek(-1);
      isArrayIndent = this.inArray() && (previous != null ? previous.newLine : void 0);
      previousSymbol = (ref = this.peek(-1)) != null ? ref[0] : void 0;
      isMultiline = previousSymbol === '=' || previousSymbol === ',';
      ignoreIndent = isInterpIndent || isArrayIndent || isMultiline;
      if (this.isChainedCall()) {
        currentLine = this.lines[this.lineNumber];
        prevNum = 1;
        while (/^\s*(#|$)/.test(this.lines[this.lineNumber - prevNum])) {
          prevNum += 1;
        }
        previousLine = this.lines[this.lineNumber - prevNum];
        previousIndentation = previousLine.match(/^(\s*)/)[1].length;
        numIndents = currentLine.match(/^(\s*)/)[1].length;
        numIndents -= previousIndentation;
      }
      expected = this.config['indentation'].value;
      if (!ignoreIndent && numIndents !== expected) {
        context = ("Expected " + expected + " ") + ("got " + numIndents);
        return this.createLexError('indentation', {
          context: context
        });
      } else {
        return null;
      }
    };

    LexicalLinter.prototype.lintClass = function(token) {
      var attrs, className, offset, ref, ref1, ref2;
      if ((token.newLine != null) || ((ref = this.peek()[0]) === 'INDENT' || ref === 'EXTENDS')) {
        return null;
      }
      className = null;
      offset = 1;
      while (!className) {
        if (((ref1 = this.peek(offset + 1)) != null ? ref1[0] : void 0) === '.') {
          offset += 2;
        } else if (((ref2 = this.peek(offset)) != null ? ref2[0] : void 0) === '@') {
          offset += 1;
        } else {
          className = this.peek(offset)[1];
        }
      }
      if (!regexes.camelCase.test(className)) {
        attrs = {
          context: "class name: " + className
        };
        return this.createLexError('camel_case_classes', attrs);
      } else {
        return null;
      }
    };

    LexicalLinter.prototype.lintArrowSpacing = function(token) {
      var pp;
      pp = this.peek(-1);
      if (!(((token.spaced != null) || (token.newLine != null) || this.atEof()) && (((pp.spaced != null) || pp[0] === 'TERMINATOR') || (pp.generated != null) || pp[0] === "INDENT" || (pp[1] === "(" && (pp.generated == null))))) {
        return this.createLexError('arrow_spacing');
      } else {
        return null;
      }
    };

    LexicalLinter.prototype.createLexError = function(rule, attrs) {
      if (attrs == null) {
        attrs = {};
      }
      attrs.lineNumber = this.lineNumber + 1;
      attrs.level = this.config[rule].level;
      attrs.line = this.lines[this.lineNumber];
      return createError(rule, attrs);
    };

    LexicalLinter.prototype.peek = function(n) {
      if (n == null) {
        n = 1;
      }
      return this.tokens[this.i + n] || null;
    };

    LexicalLinter.prototype.inArray = function() {
      return this.arrayTokens.length > 0;
    };

    LexicalLinter.prototype.atEof = function() {
      var len, m, ref, ref1, token;
      ref = this.tokens.slice(this.i + 1);
      for (m = 0, len = ref.length; m < len; m++) {
        token = ref[m];
        if (!(token.generated || ((ref1 = token[0]) === 'OUTDENT' || ref1 === 'TERMINATOR'))) {
          return false;
        }
      }
      return true;
    };

    LexicalLinter.prototype.isChainedCall = function() {
      var i, lastNewLineIndex, lines, t, token, tokens;
      lines = (function() {
        var len, m, ref, results;
        ref = this.tokens.slice(0, +this.i + 1 || 9e9);
        results = [];
        for (i = m = 0, len = ref.length; m < len; i = ++m) {
          token = ref[i];
          if (token.newLine != null) {
            results.push(i);
          }
        }
        return results;
      }).call(this);
      lastNewLineIndex = lines ? lines[lines.length - 2] : null;
      if (lastNewLineIndex == null) {
        return false;
      }
      tokens = [this.tokens[lastNewLineIndex], this.tokens[lastNewLineIndex + 1]];
      return !!((function() {
        var len, m, results;
        results = [];
        for (m = 0, len = tokens.length; m < len; m++) {
          t = tokens[m];
          if (t && t[0] === '.') {
            results.push(t);
          }
        }
        return results;
      })()).length;
    };

    return LexicalLinter;

  })();

  ASTLinter = (function() {
    function ASTLinter(source, config) {
      this.source = source;
      this.config = config;
      this.errors = [];
    }

    ASTLinter.prototype.lint = function() {
      var coffeeError;
      try {
        this.node = CoffeeScript.nodes(this.source);
      } catch (error1) {
        coffeeError = error1;
        this.errors.push(this._parseCoffeeScriptError(coffeeError));
        return this.errors;
      }
      this.lintNode(this.node);
      return this.errors;
    };

    ASTLinter.prototype.getComplexity = function(node) {
      var complexity, name, ref;
      name = node.constructor.name;
      complexity = name === 'If' || name === 'While' || name === 'For' || name === 'Try' ? 1 : name === 'Op' && ((ref = node.operator) === '&&' || ref === '||') ? 1 : name === 'Switch' ? node.cases.length : 0;
      return complexity;
    };

    ASTLinter.prototype.lintNode = function(node, line) {
      var attrs, complexity, error, name, rule;
      name = node.constructor.name;
      complexity = this.getComplexity(node);
      node.eachChild((function(_this) {
        return function(childNode) {
          var nodeLine;
          nodeLine = childNode.locationData.first_line;
          if (childNode) {
            return complexity += _this.lintNode(childNode, nodeLine);
          }
        };
      })(this));
      rule = this.config.cyclomatic_complexity;
      if (name === 'Code' && complexity >= rule.value) {
        attrs = {
          context: complexity + 1,
          level: rule.level,
          lineNumber: line + 1,
          lineNumberEnd: node.locationData.last_line + 1
        };
        error = createError('cyclomatic_complexity', attrs);
        if (error) {
          this.errors.push(error);
        }
      }
      return complexity;
    };

    ASTLinter.prototype._parseCoffeeScriptError = function(coffeeError) {
      var attrs, lineNumber, match, message, rule;
      rule = RULES['coffeescript_error'];
      message = coffeeError.toString();
      lineNumber = -1;
      if (coffeeError.location != null) {
        lineNumber = coffeeError.location.first_line + 1;
      } else {
        match = /line (\d+)/.exec(message);
        if ((match != null ? match.length : void 0) > 1) {
          lineNumber = parseInt(match[1], 10);
        }
      }
      attrs = {
        message: message,
        level: rule.level,
        lineNumber: lineNumber
      };
      return createError('coffeescript_error', attrs);
    };

    return ASTLinter;

  })();

  mergeDefaultConfig = function(userConfig) {
    var config, rule, ruleConfig;
    config = {};
    for (rule in RULES) {
      ruleConfig = RULES[rule];
      config[rule] = defaults(userConfig[rule], ruleConfig);
    }
    return config;
  };

  coffeelint.invertLiterate = function(source) {
    var len, line, m, newSource, ref;
    source = CoffeeScript.helpers.invertLiterate(source);
    newSource = "";
    ref = source.split("\n");
    for (m = 0, len = ref.length; m < len; m++) {
      line = ref[m];
      if (line.match(/^#/)) {
        line = line.replace(/\s*$/, '');
      }
      line = line.replace(/^\s{4}/g, '');
      newSource += line + "\n";
    }
    return newSource;
  };

  coffeelint.lint = function(source, userConfig, literate) {
    var all_errors, astErrors, cmd, config, difference, disabled, disabled_initially, e, errors, i, l, len, len1, lexErrors, lexicalLinter, lineErrors, lineLinter, m, next_line, o, q, r, ref, ref1, ref2, ref3, ref4, rules, s, tokensByLine;
    if (userConfig == null) {
      userConfig = {};
    }
    if (literate == null) {
      literate = false;
    }
    if (literate) {
      source = this.invertLiterate(source);
    }
    config = mergeDefaultConfig(userConfig);
    disabled_initially = [];
    ref = source.split('\n');
    for (m = 0, len = ref.length; m < len; m++) {
      l = ref[m];
      s = regexes.configStatement.exec(l);
      if ((s != null ? s.length : void 0) > 2 && indexOf.call(s, 'enable') >= 0) {
        ref1 = s.slice(1);
        for (o = 0, len1 = ref1.length; o < len1; o++) {
          r = ref1[o];
          if (r !== 'enable' && r !== 'disable') {
            if (!(r in config && ((ref2 = config[r].level) === 'warn' || ref2 === 'error'))) {
              disabled_initially.push(r);
              config[r] = {
                level: 'error'
              };
            }
          }
        }
      }
    }
    astErrors = new ASTLinter(source, config).lint();
    lexicalLinter = new LexicalLinter(source, config);
    lexErrors = lexicalLinter.lint();
    tokensByLine = lexicalLinter.tokensByLine;
    lineLinter = new LineLinter(source, config, tokensByLine);
    lineErrors = lineLinter.lint();
    errors = lexErrors.concat(lineErrors, astErrors);
    errors.sort(function(a, b) {
      return a.lineNumber - b.lineNumber;
    });
    difference = function(a, b) {
      var j, ref3, results;
      j = 0;
      results = [];
      while (j < a.length) {
        if (ref3 = a[j], indexOf.call(b, ref3) >= 0) {
          results.push(a.splice(j, 1));
        } else {
          results.push(j++);
        }
      }
      return results;
    };
    all_errors = errors;
    errors = [];
    disabled = disabled_initially;
    next_line = 0;
    for (i = q = 0, ref3 = source.split('\n').length; 0 <= ref3 ? q < ref3 : q > ref3; i = 0 <= ref3 ? ++q : --q) {
      for (cmd in block_config) {
        rules = block_config[cmd][i];
        if (rules != null) {
          ({
            'disable': function() {
              return disabled = disabled.concat(rules);
            },
            'enable': function() {
              difference(disabled, rules);
              if (rules.length === 0) {
                return disabled = disabled_initially;
              }
            }
          })[cmd]();
        }
      }
      while (next_line === i && all_errors.length > 0) {
        next_line = all_errors[0].lineNumber - 1;
        e = all_errors[0];
        if (e.lineNumber === i + 1 || (e.lineNumber == null)) {
          e = all_errors.shift();
          if (ref4 = e.rule, indexOf.call(disabled, ref4) < 0) {
            errors.push(e);
          }
        }
      }
    }
    block_config = {
      'enable': {},
      'disable': {}
    };
    return errors;
  };

}).call(this);
